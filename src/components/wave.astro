---
interface Props {
  points: number
  contrast: number
  balance: number
  width: number
  gradient?: 'left' | 'right' | 'none'
}

const { points, contrast, balance, width, gradient = 'none' } = Astro.props

function generateWavePath(points: number, contrast: number, balance: number, width: number) {
  const step = width / (points - 1)
  const pathPoints = []
  for (let i = 0; i < points; i++) {
    const x = i * step
    const y = Math.random() * contrast * balance - (contrast * balance) / 2
    pathPoints.push({ x, y })
  }

  let path = `M ${pathPoints[0].x},${pathPoints[0].y}`
  for (let i = 0; i < pathPoints.length - 1; i++) {
    const p0 = pathPoints[i - 1] || pathPoints[i]
    const p1 = pathPoints[i]
    const p2 = pathPoints[i + 1] || pathPoints[i]
    const p3 = pathPoints[i + 2] || pathPoints[i + 1] || pathPoints[i]

    const cp1x = p1.x + (p2.x - p0.x) / 6
    const cp1y = p1.y + (p2.y - p0.y) / 6
    const cp2x = p2.x - (p3.x - p1.x) / 6
    const cp2y = p2.y - (p3.y - p1.y) / 6

    path += ` C ${cp1x},${cp1y} ${cp2x},${cp2y} ${p2.x},${p2.y}`
  }

  // Close the path to the bottom
  path += ` L ${width},200 L 0,200 Z`

  return path
}

const gradientId = `wave-gradient-${Math.random().toString(36).substr(2, 9)}`
---

<svg xmlns="http://www.w3.org/2000/svg" width={width} height="300" viewBox={`0 -150 ${width} 300`} class="wave-svg">
  <defs>
    {gradient === 'left' && (
      <linearGradient id={gradientId} x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="0%" style="stop-color:var(--color-pink-accent);stop-opacity:0.6" />
        <stop offset="50%" style="stop-color:var(--color-yellow-highlight);stop-opacity:0.4" />
        <stop offset="100%" style="stop-color:var(--color-pink-fg);stop-opacity:0.2" />
      </linearGradient>
    )}
    {gradient === 'right' && (
      <linearGradient id={gradientId} x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="0%" style="stop-color:var(--color-pink-fg);stop-opacity:0.2" />
        <stop offset="50%" style="stop-color:var(--color-yellow-highlight);stop-opacity:0.4" />
        <stop offset="100%" style="stop-color:var(--color-pink-accent);stop-opacity:0.6" />
      </linearGradient>
    )}
  </defs>
  <path
    d={generateWavePath(points, contrast, balance, width)}
    fill={gradient !== 'none' ? `url(#${gradientId})` : 'var(--color-pink-accent)'}
    stroke="none"
  />
</svg>

<style>
  .wave-svg {
    display: block;
    width: 100%;
    height: 100%;
  }
</style>
